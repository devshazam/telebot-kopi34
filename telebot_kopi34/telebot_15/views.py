from django.shortcuts import HttpResponse
from django.http import JsonResponse
from django.conf import settings
from django.views.decorators.csrf import csrf_exempt
from django.core.cache import cache

import telebot
from telebot.types import LabeledPrice, ShippingOption
from telebot import types # –¥–ª—è —É–∫–∞–∑–∞–Ω–∏–µ —Ç–∏–ø–æ–≤

# import redis

from requests.auth import HTTPBasicAuth
import json 
import os
from dotenv import load_dotenv
import re
import logging

from .config.goods import goodsArray, goodsDict
from .models import Users, TeleOrders

# CONFIG
load_dotenv()
API_TOKEN = os.getenv("API_TOKEN")
PROVIDER_TOKEN = os.getenv("PROVIDER_TOKEN")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID")
LOG_NAME = os.getenv("LOG_NAME")

bot = telebot.TeleBot(API_TOKEN)
logging.basicConfig(filename=f'{LOG_NAME}.log', encoding='utf-8', level=logging.WARNING, format='%(asctime)s - %(name)s - %(levelname)s - %(message)s')
def debugToLog(text):
    logging.warning(f"{text}")

user_state_data = {}

hideBoard = types.ReplyKeyboardRemove()  # if sent as reply_markup, will hide the keyboard







# https://api.telegram.org/bot7397048375:AAFUc0nI6IQpsIgIWWW6ccU-gkgKSrLkMKQ/setWebhook?url=https://03ac-80-90-179-8.ngrok-free.app/
# https://api.telegram.org/bot7397048375:AAFUc0nI6IQpsIgIWWW6ccU-gkgKSrLkMKQ/deleteWebhook?url=https://089e-80-90-179-8.ngrok-free.app/
@csrf_exempt
def index(request):
    # bot.set_webhook('https://bf06-80-90-179-8.ngrok-free.app/')
    if request.method == "POST":
        update = telebot.types.Update.de_json(request.body.decode('utf-8'))
        bot.process_new_updates([update])

    return HttpResponse('<h1>–¢—ã –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è!</h1>')
 

















@bot.message_handler(content_types="web_app_data")
def answer(message):
    try:
        x1 = json.loads(message.web_app_data.data)

        chat_id = message.chat.id

        cache.set(f"{chat_id}_order", { 'state': 'paying', 'name': x1['name'], 'description': x1["description"], 'cost': x1["value"], 'messages': []}, 3600)

        keyboard = telebot.types.InlineKeyboardMarkup()
        button_pay = telebot.types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data='pay')
        button_cancel = telebot.types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='cancel_pay')
        button_add = telebot.types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª", callback_data='add_description')
        keyboard.add(button_pay, button_cancel, button_add)

        bot.send_message(chat_id, "–î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã!",  reply_markup=hideBoard)
        bot.send_message(chat_id, f'–í–∞—à –∑–∞–∫–∞–∑ —Å—Ç–æ–∏—Ç: {x1["value"]}', reply_markup=keyboard) 
    except Exception as e:      # works on python 3.x
        debugToLog(f'Error ‚Ññ1 - {str(e)}')
        bot.send_message(chat_id, str(e))



@bot.callback_query_handler(func=lambda call: call.data == 'add_description')
def save_btn(call):
    try:
        message = call.message
        chat_id = message.chat.id
        bot.edit_message_text(chat_id=message.chat.id, message_id=message.message_id, text="–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!")

        cached_data = cache.get(f'{chat_id}_order')
        if cached_data is None:
            raise Exception("–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!")
        if not cached_data['state'] == 'description':
            cached_data['state'] = 'description'
            cache.set(f"{chat_id}_order", cached_data, 3600)

        bot.send_message(message.chat.id, '–û–ø–∏—à–∏—Ç–µ –≤–∞—à –∑–∞–∫–∞–∑ –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ —Ñ–∞–π–ª:', reply_markup=hideBoard)


    except Exception as e:
        debugToLog(f'Error ‚Ññq3')
        bot.send_message(message.chat.id, str(e))

     

@bot.callback_query_handler(func=lambda call: call.data == 'cancel_pay')
def save_btn(call):
    try:
        message = call.message
        cache.delete(f'{message.chat.id}_order')
        bot.send_message(message.chat.id, '–ü–ª–∞—Ç–µ–∂ –æ—Ç–º–µ–Ω–µ–Ω!', reply_markup=hideBoard)
    except Exception as e:      # works on python 3.x
        debugToLog(f'Error ‚Ññ3 - {str(e)}')
        bot.send_message(message.chat.id, str(e))

        
@bot.callback_query_handler(func=lambda call: call.data == 'pay')
def save_btn(call):
    try:
        message = call.message
        chat_id = message.chat.id
        message_id = message.message_id  
        bot.edit_message_text(chat_id=chat_id, message_id=message_id, 
                             text='‚ö†Ô∏è–û–ø–ª–∞—Ç–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞ —Å–º–∞—Ä—Ç—Ñ–æ–Ω–µ‚ö†Ô∏è!')  
        cached_data = cache.get(f'{chat_id}_order')
        if cached_data is None:
            raise Exception("–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ, –Ω–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!")

        prices = [LabeledPrice(label=f'{cached_data["name"]}', amount=int(cached_data['cost'])*100)]

        bot.send_invoice(
            message.chat.id,  #chat_id
            f'{cached_data["name"]}', #title
            f'{cached_data["description"]}', #description
            'Kopi34.ru - sales', #invoice_payload
            PROVIDER_TOKEN, #provider_token
            'rub', #currency
            prices, #prices # True If you need to set up Shipping Fee
            start_parameter='kopi34_start_param',)
    except Exception as e:      # works on python 3.x
        
        debugToLog(f'Error ‚Ññe3 - {str(e)}')
        bot.send_message(message.chat.id, str(e))


@bot.pre_checkout_query_handler(func=lambda query: True)
def checkout(pre_checkout_query):
    try:
        print(pre_checkout_query)
        bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True,
                                  error_message="Aliens tried to steal your card's CVV, but we successfully protected your credentials,"
                                                " try to pay again in a few minutes, we need a small rest.")
    except Exception as e:      # works on python 3.x
        debugToLog(f'Error ‚Ññ6 - {str(e)}')

@bot.message_handler(content_types=['successful_payment'])
def got_payment(message):
    try:
        chat_id = message.chat.id
        cached_data = cache.get(f'{chat_id}_order')
        if cached_data is None:
            raise Exception("–û—à–∏–±–∫–∞ –ø–ª–∞—Ç–µ–∂–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞, –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!")
        TeleOrders.objects.create(userChatTelegramId=chat_id, cost=cached_data['cost'], name=cached_data['name'], description=cached_data['description'], messages=json.dumps(cached_data['messages']))
        
        cache.delete(f'{chat_id}_order')
        bot.send_message(message.chat.id,
                        '–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!\n–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –Ω–æ–º–µ—Ä–æ–º –í–∞—à–µ–≥–æ —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ /number\n–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞ –Ω–∞–∂–º–∏—Ç–µ /user',
                        parse_mode='Markdown')
        
        bot.send_message(ADMIN_CHAT_ID, '–ü–æ—Å—Ç—É–ø–∏–ª –Ω–æ–≤—ã–π –∑–∞–∫–∞–∑\n–î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö 10 –∑–∞–∫–∞–∑–æ–≤ –Ω–∞–∂–º–∏—Ç–µ /get_orders', parse_mode='Markdown') 
        
    except Exception as e:      # works on python 3.x
        debugToLog(f'Error ‚Ññ7 - {str(e)}') 
        bot.send_message(message.chat.id, str(e))  
























@bot.message_handler(commands=['diag'])
def clientId(message):
    try: 
        chat_id = message.chat.id
        cached_data = cache.get(f'{chat_id}_order')
        if cached_data is None:
            raise Exception("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö!")
        bot.send_message(message.chat.id, f'–ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –æ–±—ä–µ–∫—Ç user_state_data —Å–æ–¥–µ—Ä–∂–∏—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤: {json.dumps(cached_data)}')
    except Exception as e:      # works on python 3.x
        debugToLog(f'Error ‚Ññd1 - {str(e)}')
        bot.send_message(message.chat.id, str(e))  





















# USER COMANDS:
@bot.message_handler(commands=['start'])
def startCommand(message):
    try: 
        bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è —Ä–æ–±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ kopi34.ru!'
                                            '\n–Ø –º–æ–≥—É –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏ —Ü–µ–Ω–∞—Ö –∏ —Å–æ–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞—Ö!'
                                            '\n–ö–æ–º–∞–Ω–¥—ã:'
                                            '\n/contacts - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã'
                                            '\n/number - –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞'
                                            '\n/help - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥'
                                            '\n/i_can - —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤')
    except Exception as e:
        debugToLog(f'Error ‚Ññ8 - {str(e)}')
        bot.send_message(message.chat.id, str(e))  


@bot.message_handler(commands=['i_can'])
def canCommand(message):
    try: 
        bot.send_message(message.chat.id, '–Ø –º–æ–≥—É –ø—Ä–æ–¥–∞–≤–∞—Ç—å:'
                                            '\nüõí –í–∏–∑–∏—Ç–∫–∏'
                                            '\nüõí –ë–∞–Ω–Ω–µ—Ä—ã'
                                            '\nüõí –°–∞–º–æ–∫–ª–µ–π–∫–∏'
                                            '\nüõí –ó–Ω–∞—á–∫–∏\n'
                                            '\n–Ø –º–æ–≥—É –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –ø—Ä–∞–π—Å—ã –ø–æ:'
                                            '\n‚ÑπÔ∏è –¶–µ–Ω–µ –õ–∞–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–∏—è'
                                            '\n‚ÑπÔ∏è –¶–µ–Ω–µ –ö—Å–µ—Ä–æ–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è'
                                            '\n‚ÑπÔ∏è –¶–µ–Ω–µ –¢–≤–µ—Ä–¥–æ–≥–æ –ø–µ—Ä–µ–ø–ª–µ—Ç–∞'
                                            '\n‚ÑπÔ∏è –¶–µ–Ω–µ –†–∞—Å–ø–µ—á–∞—Ç–∫–∏ —á–µ—Ä—Ç–µ–∂–µ–π'
                                            '\n‚ÑπÔ∏è –¶–µ–Ω–µ –ë—Ä–æ—à—é—Ä–æ–≤–∫–∏'
                                            '\n‚ÑπÔ∏è –¶–µ–Ω–µ –§–æ—Ç–æ –Ω–∞ –¥–æ–∫—É–º–µ–Ω—Ç—ã'
                                            '\n‚ÑπÔ∏è –¶–µ–Ω–µ –†–∏–∑–æ–≥—Ä–∞—Ñ–∏–∏'
                                            '\n‚ÑπÔ∏è –¶–µ–Ω–µ –ü–µ—á–∞—Ç–∏ –Ω–∞ —Ö–æ–ª—Å—Ç–µ'
                                            '\n‚ÑπÔ∏è –¶–µ–Ω–µ –°–∞–π—Ç–æ–≤'
                                            '\n‚ÑπÔ∏è –¶–µ–Ω–µ –†–∞—Å–ø–µ—á–∞—Ç–∫–∏'
                                            '\n'
                                            '\n–ü—Ä–æ—Å—Ç–æ –≤–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–µ–≥–æ –í–∞—Å —Ç–æ–≤–∞—Ä–∞!'
                                            )
    except Exception as e:      # works on python 3.x
        debugToLog(f'Error ‚Ññ9 - {str(e)}')
        bot.send_message(message.chat.id, str(e))  


@bot.message_handler(commands=['help'])
def helpCommand(message):
    try: 
        bot.send_message(message.chat.id, '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, —è telegram bot!'
                                            '\n–Ø –æ—Ç–≤–µ—á–∞—é –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Ç–æ–≤–∞—Ä–∞—Ö, —Ü–µ–Ω–∞—Ö –∏ –∑–∞–∫–∞–∑–∞—Ö!'
                                            '\n–í–æ—Ç –º–æ–∏ –∫–æ–º–∞–Ω–¥—ã, ‚ö†Ô∏è–Ω–∞–∂–º–∏—Ç–µ –¥–ª—è –∏—Å–ø–æ–ª–Ω–µ–Ω–∏—è:'
                                            '\n/contacts - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –∫–æ–Ω—Ç–∞–∫—Ç–æ–≤ –∏ –≥—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã'
                                            '\n/user - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –í–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤'
                                            '\n/number - –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏!5'
                                            '\n/help - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥'
                                            '\n/i_can - –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ–≤–∞—Ä–æ–≤'
                                            '\n–ü–µ—Ä–µ—Ö–æ–¥ –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: @kopiprint34')
    except Exception as e:
         debugToLog(f'Error ‚Ññ10 - {str(e)}')
         bot.send_message(message.chat.id, str(e))  
        


@bot.message_handler(commands=['contacts'])
def contactsCommand(message):
    try: 
        bot.send_message(message.chat.id, '<b>–ù–∞—à–∏ –∫–æ–Ω—Ç–∞–∫—Ç—ã:</b>\n–°–∞–π—Ç: https://kopi34.ru\n–¢–µ–ª–µ—Ñ–æ–Ω: +7(909) 380-25-19\n–¢–µ–ª–µ–≥—Ä–∞–º: @kopiprint34\n–û—Ñ–∏—Å ‚Ññ1: –ü–µ—Ç—Ä–æ–ø–∞–≤–ª–æ–≤—Å–∫–∞—è 87\n–û—Ñ–∏—Å ‚Ññ2: –ö–∞–∑–∞—Ö—Å–∫–∞—è 25\n–ì—Ä–∞—Ñ–∏–∫ —Ä–∞–±–æ—Ç—ã: –ü–Ω-–ü—Ç 9:00-19:00', parse_mode='html') 
    except Exception as e:
         debugToLog(f'Error ‚Ññ11 - {str(e)}')
         bot.send_message(message.chat.id, str(e))  
        

@bot.message_handler (commands = ['number'])
def numberCommand(message):
    try:
        keyboard = types.ReplyKeyboardMarkup (row_width = 1, resize_keyboard = True) # Connect the keyboard
        button_phone = types.KeyboardButton (text = "–†–∞–∑—Ä–µ—à–∏—Ç—å!", request_contact = True) # Specify the name of the button that the user will see
        keyboard.add (button_phone) #Add this button
        bot.send_message (message.chat.id, '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Ä–∞–∑—Ä–µ—à–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –≤–∞—à–µ–º—É –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É—Ç–æ—á–Ω–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é!', reply_markup = keyboard) 
    except Exception as e:      # works on python 3.x
        debugToLog(f'Error ‚Ññ12 - {str(e)}')
        bot.send_message(message.chat.id, str(e))  
 
@bot.message_handler (content_types = ['contact'])
def contact(message):
    try:
        if message.contact is not None: # If the sent object <strong> contact </strong> is not zero
            if Users.objects.filter(userChatTelegramId=message.contact.user_id).exists():
                getDay = Users.objects.filter(userChatTelegramId=message.contact.user_id).get()
                getDay.phone = message.contact.phone_number
                getDay.save()
                # Journal.objects.filter(name=todayDate).update(number=(int(x1) + 1))
            else:
                newPay = Users(userChatTelegramId=message.contact.user_id, phone=message.contact.phone_number, firstName=message.contact.first_name)
                newPay.save()
        x3 = f'–ö–ª–∏–µ–Ω—Ç —Å Id: {message.contact.user_id} –ø–æ–¥–µ–ª–∏–ª—Å—è —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º: {message.contact.phone_number}'
        bot.send_message (message.chat.id, '–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –º—ã —Å–º–æ–∂–µ–º —Å –í–∞–º–∏ —Å–≤—è–∑–∞—Ç—å—Å—è!', reply_markup=hideBoard) 
        bot.send_message (ADMIN_CHAT_ID, x3) 
    except Exception as e:      # works on python 3.x
        debugToLog(f'Error ‚Ññ13 - {str(e)}')
        bot.send_message(message.chat.id, str(e)) 




@bot.message_handler(commands=['user'])
def userCommand(message):
    try: 
        if TeleOrders.objects.filter(userChatTelegramId=message.chat.id, doneStatus=False).exists():
            useOrders = TeleOrders.objects.filter(userChatTelegramId=message.chat.id)   
            x1 = ''
            x2 = 1
            for x in useOrders:
                x1 += f'‚Ññ{x2}; –¶–µ–Ω–∞: {x.cost}; –û–ø–ª–∞—á–µ–Ω–æ: {"–î–∞" if x.payStatus else "–ù–µ—Ç"}; –ì–æ—Ç–æ–≤–æ: {"–î–∞" if x.doneStatus else "–ù–µ—Ç"}.\n'
                x2 += 1
            bot.send_message (message.chat.id, f'{x1}', parse_mode='html') 
        else:

            bot.send_message (message.chat.id, '–£ –í–∞—Å –Ω–µ—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!') 
    except Exception as e:      # works on python 3.x
         debugToLog(f'Error ‚Ññ14 - {str(e)}')
         bot.send_message(message.chat.id, str(e)) 
        



























# ADMIN COMMANDS:
@bot.message_handler(commands=['admin'])
def adminCommand(message):
    try: 
        bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä!'
                                            '\n/user_phone_by_id - –ø–æ–ø—Ä–æ—Å–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ —Å–≤—è–∑–∞—Ç—å—Å—è –ø–æ –µ–≥–æ id'
                                            '\n/get_orders - –ø–æ–ª—É—á–∏—Ç—å 10 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–∞–∫–∞–∑–æ–≤'
                                            '\n/get_order_by_id - –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –ø–æ –µ–≥–æ id')
    except Exception as e: 
         debugToLog(f'Error ‚Ññ15 - {str(e)}')
         bot.send_message(message.chat.id, str(e)) 


@bot.message_handler(commands=['user_phone_by_id'])
def userPhoneById(message):
    try: 
        chat_id = message.chat.id
        if str(chat_id) in ADMIN_CHAT_ID.split():
            mesg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –∫–ª–∏–µ–Ω—Ç–∞:')
            bot.register_next_step_handler(mesg, loop1)
        else:
            bot.send_message(message.chat.id, '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!')
    except Exception as e:      # works on python 3.x
        bot.clear_step_handler_by_chat_id(message.chat.id)
        debugToLog(f'Error ‚Ññ16 - {str(e)}')
        bot.send_message(message.chat.id, str(e)) 

def loop1(message):
    try:
        x1 = re.search(r"\d+", message.text)
        if not x1 :
            raise Exception("–ó–Ω–∞—á–µ–Ω–∏–µ id –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!")
        x2 = int(x1.group())
        bot.send_message(x2, '–£–≤–∞–∂–∞–µ–º—ã–π –∫–ª–∏–µ–Ω—Ç, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –Ω–∞–º–∏ –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —É—Ç–æ—á–Ω–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞, –Ω–∞–∂–∞–≤ –Ω–∞ /number')
        bot.send_message(message.chat.id, '–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É. –í—ã –ø–æ–ª—É—á–∏—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ —Ç–æ–ª—å–∫–æ –æ–Ω –ø–æ–¥–µ–ª–∏—Ç—Å—è —Å–≤–æ–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º, –∞ —Ç–∞–∫–∂–µ –∑–∞–ø–∏—Å—å –ø–æ—è–≤–∏—Ç—Å—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö!')
    except Exception as e:      # works on python 3.x
        debugToLog(f'Error ‚Ññ17 - {str(e)}')
        bot.send_message(message.chat.id, str(e))



@bot.message_handler(commands=['get_orders'])
def getOrders(message):
    try: 
        chat_id = message.chat.id
        if str(chat_id) in ADMIN_CHAT_ID.split():
            if TeleOrders.objects.filter(doneStatus=False).exists():
                useOrders = TeleOrders.objects.filter(doneStatus=False).order_by("-created_at")[0:10].all().values()
                print(useOrders)
                x3 = ''
                for x in useOrders:
                    x3 += f'id: {x["id"]}; –¶–µ–Ω–∞: {x["cost"]}; –û–ø–ª–∞—á–µ–Ω–æ: {"–î–∞" if x["payStatus"] else "–ù–µ—Ç"}; –ì–æ—Ç–æ–≤–æ: {"–î–∞" if x["doneStatus"] else "–ù–µ—Ç"}.\n'

                bot.send_message(message.chat.id, x3)
            else:
                bot.send_message(message.chat.id, '–£ –í–∞—Å –Ω–µ—Ç –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤!')
        else:
            bot.send_message(message.chat.id, '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!')

    except Exception as e:      # works on python 3.x
        debugToLog(f'Error ‚Ññ18 - {str(e)}')
        bot.send_message(message.chat.id, str(e)) 
        




@bot.message_handler(commands=['get_order_by_id'])
def getOrderByID(message):
    try: 
        # chat_id = message.chat.id
        # if chat_id == ADMIN_CHAT_ID:
            mesg = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏—Ç–µ id –∑–∞–∫–∞–∑–∞:')
            bot.register_next_step_handler(mesg, loop2)
        # else:
            # bot.send_message(message.chat.id, '–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É!')

    except Exception as e:      # works on python 3.x
        debugToLog(f'Error ‚Ññ19 - {str(e)}')
        bot.clear_step_handler_by_chat_id(message.chat.id)
        bot.send_message(message.chat.id, str(e)) 

def loop2(message):
    try:
        x1 = re.search(r"\d+", message.text)
        if not x1 :
            raise Exception("–ó–Ω–∞—á–µ–Ω–∏–µ id –Ω–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ! –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ!")
        x2 = int(x1.group())
        if TeleOrders.objects.filter(id=x2).exists():
            useOrders = TeleOrders.objects.get(id=x2)  

            bot.send_message (message.chat.id, f'id: {useOrders.id}, —Ü–µ–Ω–∞: {useOrders.cost}, –Ω–∞–∑–≤–∞–Ω–∏–µ: {useOrders.name}, –æ–ø–∏—Å–∞–Ω–∏–µ: {useOrders.description}') 

            if len(json.loads(useOrders.messages)) > 0:
                bot.forward_messages(message.chat.id, useOrders.userChatTelegramId, json.loads(useOrders.messages))


            linked_user = f'[–ö–ª–∏–µ–Ω—Ç](tg://user?id={useOrders.userChatTelegramId})'
            bot.send_message(message.chat.id, f'{linked_user}',
            parse_mode='MarkdownV2',
            disable_web_page_preview=True)
        else:
            raise Exception("–¢–∞–∫–æ–≥–æ id –∑–∞–∫–∞–∑–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")

    except Exception as e:      # works on python 3.x
        debugToLog(f'Error ‚Ññ20 - {str(e)}')
        bot.send_message(message.chat.id, str(e))

























# –î–∏—Å–ø–µ—Ç—á–µ—Ä
@bot.message_handler(content_types=['text'])
def textHandler(message):
    try:
        chat_id = message.chat.id
        bot.send_message(message.chat.id, '...', reply_markup=hideBoard)

        cached_state_data = cache.get(f'{chat_id}_order')
        if cached_state_data is None:
            x1 = 0
            for x in goodsArray:
                if re.search(fr"{x[1]}", message.text, re.IGNORECASE):

                        keyboard = telebot.types.InlineKeyboardMarkup()
                        button_save = telebot.types.InlineKeyboardButton(text="–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å!", callback_data=f'{x[0]}')
                        keyboard.add(button_save)
                        bot.send_message(message.chat.id, f'–í—ã —Ö–æ—Ç–∏—Ç–µ -  {x[2]}?', reply_markup=keyboard)
                        x1 = 1
                        break

            if x1 == 0:
                bot.send_message(message.chat.id, '–í–æ–∑–º–æ–∂–Ω–æ –¥–æ–ø—É—â–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞ –∏–ª–∏ –≤ –º–æ–µ–π –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –¢–û–í–ê–†–ê!'
                                                '\n/help - –Ω–∞–∂–º–∏—Ç–µ, –µ—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!')
        else:
            if cached_state_data['state'] == 'description':
                cached_state_data['messages'].append(message.message_id)
                cache.set(f"{chat_id}_order", cached_state_data, 3600)
                
            keyboard = telebot.types.InlineKeyboardMarkup()
            button_pay = telebot.types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data='pay')
            button_cancel = telebot.types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='cancel_pay')
            button_add = telebot.types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª", callback_data='add_description')
            keyboard.add(button_pay, button_cancel, button_add)
            bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=keyboard)

    except Exception as e:      # works on python 3.x
         debugToLog(f'Error ‚Ññ21 - {str(e)}')
         bot.send_message(message.chat.id, str(e))
        


@bot.message_handler(content_types=['document', 'sticker', 'video', 'photo', 'voice', 'audio', 'location'])
def fileHandler(message):
    try:
        chat_id = message.chat.id
        bot.send_message(message.chat.id, '...', reply_markup=hideBoard)

        cached_state_data = cache.get(f'{chat_id}_order')
        if cached_state_data is None:

            bot.send_message(message.chat.id, '–í–æ–∑–º–æ–∂–Ω–æ –¥–æ–ø—É—â–µ–Ω–∞ –æ–ø–µ—á–∞—Ç–∫–∞ –∏–ª–∏ –≤ –º–æ–µ–π –±–∞–∑–µ –ø–æ–∫–∞ –Ω–µ—Ç —Ç–∞–∫–æ–≥–æ –¢–û–í–ê–†–ê!'
                                                '\n/help - –Ω–∞–∂–º–∏—Ç–µ, –µ—Å–ª–∏ –í–∞–º –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å!')
        else:
            if cached_state_data['state'] == 'description':
                cached_state_data['messages'].append(message.message_id)
                cache.set(f"{chat_id}_order", cached_state_data, 3600)
                
            keyboard = telebot.types.InlineKeyboardMarkup()
            button_pay = telebot.types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å", callback_data='pay')
            button_cancel = telebot.types.InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–∫–∞–∑", callback_data='cancel_pay')
            button_add = telebot.types.InlineKeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ –∏–ª–∏ —Ñ–∞–π–ª", callback_data='add_description')
            keyboard.add(button_pay, button_cancel, button_add)
            bot.send_message(message.chat.id, f'–í—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=keyboard)

    except Exception as e:      # works on python 3.x
         debugToLog(f'Error ‚Ññ121 - {str(e)}')
         bot.send_message(message.chat.id, str(e))











# –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ —Å–∫–æ—Ä–æ –ø–æ—è–≤—è—Ç—Å—è!
@bot.callback_query_handler(func=lambda call: call.data == 'soon')
def soonCallback(call):
    try:
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!")
        bot.send_message(call.message.chat.id, '–î–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –°–ö–û–†–û –±—É–¥–µ—Ç –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω –ø—Ä–∞–π—Å-–ª–∏—Å—Ç!', parse_mode="Markdown")
    except Exception as e:      # works on python 3.x
        debugToLog(f'Error ‚Ññ22 - {str(e)}')
        bot.send_message(message.chat.id, str(e))
        

# –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –≤ –º–∞–≥–∞–∑–∏–Ω–µ
@bot.callback_query_handler(func=lambda call: call.data in ['cards_store', 'stickers_store', 'banner_store', 'badge_store'])
def storeCallback(call):
    try:
        message = call.message
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!")
        keyboard = types.ReplyKeyboardMarkup(row_width=1)
        webApp = types.WebAppInfo(f'{goodsDict[call.data][2]}') 
        one = types.KeyboardButton(text=f'–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä {goodsDict[call.data][1]}', web_app=webApp)
        keyboard.add(one) 
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–Ω–∏–∑—É –¥–ª—è –∑–∞–ø—É—Å–∫–∞:', parse_mode="Markdown", reply_markup=keyboard)
    except Exception as e:      # works on python 3.x
         debugToLog(f'Error ‚Ññ23 - {str(e)}')
         bot.send_message(message.chat.id, str(e))


# –î–ª—è —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ —Å—Å—ã–ª–∫–µ
@bot.callback_query_handler(func=lambda call: call.data in ['tv_pereplet', 'chertej', 'scan', 'ksero', 'lamin', 'brosh', 'photo_doc', 'rizograf', 'pechat_3d', 'pechat_holst', 'sites', 'pechat_main', ])
def priceCallback(call):
    try:
        message = call.message
        bot.edit_message_text(chat_id=call.message.chat.id, message_id=call.message.message_id, text="–í—ã–±–æ—Ä —Å–¥–µ–ª–∞–Ω!")
        keyboard = types.ReplyKeyboardMarkup(row_width=1) #—Å–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        x1 = []
        for x in goodsDict[call.data][1]:
            webApp = types.WebAppInfo(x[1])
            x1.append(types.KeyboardButton(text=x[0], web_app=webApp))

        keyboard.add(*x1) #–¥–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        bot.send_message(message.chat.id, '–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∞–∏ÃÜ—Å-–ª–∏—Å—Ç ‚¨áÔ∏è', parse_mode="Markdown", reply_markup=keyboard)
    except Exception as e:      # works on python 3.x
         debugToLog(f'Error ‚Ññ24 - {str(e)}')
         bot.send_message(message.chat.id, str(e))
        

